---
# yamllint disable rule:line-length
name: CD

# yamllint disable-line rule:truthy
on:
  workflow_call:
    inputs:
      APP_NAME:
        required: false
        type: string
      ENABLE_SENTRY_RELEASE:
        required: false
        type: string
      SENTRY_PROJECT:
        required: false
        type: string
      IMAGE_NAME:
        required: false
        type: string
        default: 'ghcr.io/${{ github.repository }}'
    secrets:
      ALERTS_CHANNEL:
        required: true
      ARGOCD_URL:
        required: true
      ARGOCD_USER:
        required: true
      ARGOCD_PASS:
        required: true
      SENTRY_AUTH_TOKEN:
        required: false
      
env:
  ALERTS_CHANNEL: "${{ secrets.ALERTS_CHANNEL }}"
  ARGOCD_URL: "${{ secrets.ARGOCD_URL }}"
  ARGOCD_USER: "${{ secrets.ARGOCD_USER }}"
  ARGOCD_PASS: "${{ secrets.ARGOCD_PASS }}"


jobs:
  sync-stg:
    runs-on: self-hosted
    environment: staging
    steps:
      - name: Get app image
        run: echo "${{ inputs.IMAGE_NAME }}"

      - run: echo "APP_NAME=$(echo '${{ github.repository }}' | awk -F '/' '{print $2}')" >> $GITHUB_ENV
        shell: bash

      - name: Login to ArgoCD
        uses: clowdhaus/argo-cd-action/@main
        with:
          command: login "${{ secrets.ARGOCD_URL }}"
          options: --grpc-web --username "${{ secrets.ARGOCD_USER }}" --password "${{ secrets.ARGOCD_PASS }}"

      - name: Get Short SHA
        id: sha
        run: echo "::set-output name=sha8::$(echo ${GITHUB_SHA} | cut -c1-8)"

      - name: ArgoCD Overwrite Image Tag
        uses: clowdhaus/argo-cd-action/@main
        with:
          command: app set "${{ env.APP_NAME }}-stg"
          options: --kustomize-image "${{ inputs.IMAGE_NAME }}:${{ steps.sha.outputs.sha8 }}"

      - name: Sync Staging
        uses: clowdhaus/argo-cd-action/@main
        with:
          command: app sync "${{ env.APP_NAME }}-stg"

      - name: sentry-release
        run: |
          if [ inputs.ENABLE_SENTRY_RELEASE == "true" ]; then
            # Install Sentry CLI
            curl -sL https://sentry.io/get-cli/ | bash
            
            # Create new Sentry release
            export SENTRY_RELEASE=$(sentry-cli releases propose-version)
            sentry-cli releases new -p inputs.SENTRY_PROJECT $SENTRY_RELEASE
            sentry-cli releases set-commits --auto $SENTRY_RELEASE || true
            sentry-cli releases finalize $SENTRY_RELEASE
            
            # Create new deploy for this Sentry release
            sentry-cli releases deploys $SENTRY_RELEASE new -e stg
          else
            echo "Sentry Release is disabled."
          fi

      - name: Deploy ${{ env.APP_NAME }} stg version ${{ steps.sha.outputs.sha8 }} by user ${{ github.actor }}
        if: always()
        uses: act10ns/slack@v1
        with:
          status: ${{ job.status }}
          steps: ${{ toJson(steps) }}
          channel: "${{ env.ALERTS_CHANNEL }}"
